---
import i18next from "i18next";
---
<lang-toggle>
    <button>
        <span class="sr-only">Fr</span>
        <span class="icon fr">Fr</span>
        <span class="icon en">En</span>
    </button>
</lang-toggle>


<style>
	button {
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0;
		background-color: var(--gray-999);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 2rem;
		height: 2rem;
		font-size: 1rem;
		color: var(--accent-overlay);
	}

	.icon.fr::before {
		content: '';
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}

	:global(.theme-en) .icon.fr::before {
		transform: translateX(100%);
	}

	:global(.theme-en) .icon.en,
	:global(html:not(.theme-en)) .icon.fr,
	button[aria-pressed='false'] .icon.fr {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.fr::before {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>

<script>
    class LanguageToggle extends HTMLElement {
        constructor() {
            super();
    
            const button = this.querySelector('button')!;
    
            /** Set the language to fr/en mode. */
            const setLanguage = (isEn: any) => {
                document.documentElement.classList[isEn ? 'add' : 'remove']('theme-en');
                button.setAttribute('aria-pressed', String(isEn));
            };
    
            // Toggle the language when a user clicks the button.
            button.addEventListener('click', () => setLanguage(!this.isEn()));
    
            // Initialize button state to reflect current language.
            setLanguage(this.isEn());
        }
    
        isEn() {
            return document.documentElement.classList.contains('theme-en');
        }
    }
    
    customElements.define('lang-toggle', LanguageToggle);
    </script>